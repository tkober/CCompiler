%{
	
#import "CCParser.h"
#import "CCSymbolTable.h"
#import "CCIdentifierNode.h"
#import "CCConstNode.h"


CCIdentifierNode * identifierNodeForSymbolWithName(char *name);

%}

/* some complex named patterns */
/* Universal Character Name */
UCN (\\u[0-9a-fA-F]{4}|\\U[0-9a-fA-F]{8})

/* float exponent */
EXP ([Ee][-+]?[0-9]+)

/* integer length */
ILEN ([Uu](L|l|LL|ll)?|(L|l|LL|ll)[Uu]?)

%option noyywrap 
%option yylineno


%%


"void"                                      { return VOID;      }
"char"                                      { return CHAR;      }
"short"                                     { return SHORT;     }
"int"                                       { return INT;       }
"long"                                      { return LONG;      }
"float"                                     { return FLOAT;     }
"double"                                    { return DOUBLE;    }
"signed"                                    { return SIGNED;    }
"unsigned"                                  { return UNSIGNED;  }
"break"                                     { return BREAK;     }
"continue"                                  { return CONTINUE;  }
"else"                                      { return ELSE;      }
"goto"                                      { return GOTO;      }
"if"                                        { return IF;        }
"return"                                    { return RETURN;    }
"while"                                     { return WHILE;     }

[a-zA-Z_][a-zA-Z_0-9]*                      {
                                                yylval.syntax_node = identifierNodeForSymbolWithName(yytext);
                                                return ID;
                                            }

0[0-7]*{ILEN}?                              {
                                                yylval.syntax_node = [CCConstNode CC_INT_CONST];
                                                [(CCConstNode *) yylval.syntax_node setValue:@(atoi(yytext))];
                                                return INT_CONST;
                                            }
[1-9][0-9]*{ILEN}                           {
                                                yylval.syntax_node = [CCConstNode CC_INT_CONST];
                                                [(CCConstNode *) yylval.syntax_node setValue:@(atoi(yytext))];
                                                return INT_CONST;
                                            }
0[Xx][0-9a-fA-F]+{ILEN}?                    {
                                                yylval.syntax_node = [CCConstNode CC_INT_CONST];
                                                [(CCConstNode *) yylval.syntax_node setValue:@(atoi(yytext))];
                                                return INT_CONST;
                                            }


([0-9]*\.[0-9]+|[0-9]+\.){EXP}?[flFL]?      {
                                                yylval.syntax_node = [CCConstNode CC_FLOAT_CONST];
                                                [(CCConstNode *) yylval.syntax_node setValue:@(atof(yytext))];
                                                return FLOAT_CONST;
                                            }
[0-9]+{EXP}[flFL]?                          {
                                                yylval.syntax_node = [CCConstNode CC_FLOAT_CONST];
                                                [(CCConstNode *) yylval.syntax_node setValue:@(atof(yytext))];
                                                return FLOAT_CONST;
                                            }

0[Xx]([0-9a-fA-F]*\.[0-9a-fA-F]+|[0-9a-fA-F]+\.?)[Pp][-+]?[0-9]+[lfLF]?     {
                                                                                yylval.syntax_node = [CCConstNode CC_FLOAT_CONST];
                                                                                [(CCConstNode *) yylval.syntax_node setValue:@(atof(yytext))];
                                                                                return FLOAT_CONST;
                                                                            }


\'([^'\\]|\\['"?\\abfnrtv]|\\[0-7]{1,3}|\\[Xx][0-9a-fA-F]+|{UCN})+\'        {
                                                                                yylval.syntax_node = [CCConstNode CC_CHAR_CONST];
                                                                                [(CCConstNode *) yylval.syntax_node setValue:@(*yytext)];
                                                                                return CHAR_CONST;
                                                                            }


[0-9]+                                      {   
                                                yylval.syntax_node = [CCConstNode CC_INT_CONST];
                                                [(CCConstNode *) yylval.syntax_node setValue:@(atoi(yytext))];
                                                return INT_CONST; 
                                            }




"="                                         { return ASSIGN_OP; }
"*="                                        { return ASSIGN_MUL_OP; }
"/="                                        { return ASSIGN_DIV_OP; }
"%="                                        { return ASSIGN_MOD_OP; }
"+="                                        { return ASSIGN_ADD_OP; }
"-="                                        { return ASSIGN_SUB_OP; }
"<<="                                       { return ASSIGN_SHIFT_LEFT_OP; }
">>="                                       { return ASSIGN_SHIFT_RIGHT_OP; }
"&="                                        { return ASSIGN_BITWISE_AND_OP; }
"^="                                        { return ASSIGN_BITWISE_XOR_OP; }
"|="                                        { return ASSIGN_BITWISE_OR_OP; }


"++"                                        { return UNARY_INCREMENT_OP; }
"--"                                        { return UNARY_DECREMENT_OP; }
"~"                                         { return BITWISE_NOT_OP; }
"*"                                         { return MUL_OP; }
"/"                                         { return DIV_OP; }
"+"                                         { return ADD_OP; }
"-"                                         { return SUB_OP; }
"!"                                         { return NOT_OP; }
"%"                                         { return MOD_OP; }
"|"                                         { return OR_OP; }
"&"                                         { return AND_OP; }
"||"                                        { return LOGICAL_OR_OP; }
"&&"                                        { return LOGICAL_AND_OP; }
"^"                                         { return EXCLUSIVE_OR_OP; }


"=="                                        { return EQUAL_OP; }
"!="                                        { return NOT_EQUAL_OP; }
"<"                                         { return LT_OP; }
">"                                         { return GT_OP; }
"<="                                        { return LE_OP; }
">="                                        { return GE_OP; }


";"                                         { return LINE_END;  }
":"                                         { return COLON;  }
","                                         { return COMMA;  }
"?"                                         { return QUESTION_MARK;  }


"<<"                                        { return SHIFT_LEFT_OP; }
">>"                                        { return SHIFT_RIGHT_OP; }


"("                                         { return OB; }
")"                                         { return CB; }
"{"                                         { return OB_CURLY; }
"}"                                         { return CB_CURLY; }


[ \t]                                       { }
\n                                          { }

.                                           { [_output printWarning:[NSString stringWithFormat:@"[line %i] warning: Unkown character %c\n", yylineno, *yytext]]; }


%%

CCIdentifierNode * identifierNodeForSymbolWithName(char *name)
{
    BOOL alreadyDeclared = NO;
    NSNumber *hash = nil;
    
    CCIdentifierNode *result = [CCIdentifierNode identifierNodeWithSymbolReference:[[CCSymbolTable sharedInstance] addReferenceSymbol:name
                                                                                                                                 file:"<EDITOR>"
                                                                                                                                 line:yylineno
                                                                                                                                 hash:&hash
                                                                                                                      alreadyDeclared:&alreadyDeclared]];
    [result setHash:hash];
    [result setAlreadyDeclared:alreadyDeclared];
    return result;
}

