%{

#include <stdio.h>

#import "CCParser.h"
#import "CCScanner.h"
#import "CCSymbolTable.h"
#import "CCAbstractSyntaxTree.h"
#import "CCDebug.h"

#if BISON_DEBUG
    #define YYDEBUG 1
#endif

id<CCOutput> _output;

%}

// Type Specifiers
%token VOID
%token CHAR
%token SHORT
%token INT
%token LONG
%token FLOAT
%token DOUBLE
%token SIGNED
%token UNSIGNED

// Symbols
%token ID
%token STRING
%token CHAR_CONST
%token INT_CONST
%token FLOAT_CONST

// Assignement Operators
%token ASSIGN_OP
%token ASSIGN_MUL_OP
%token ASSIGN_DIV_OP
%token ASSIGN_MOD_OP
%token ASSIGN_ADD_OP
%token ASSIGN_SUB_OP
%token ASSIGN_SHIFT_LEFT_OP
%token ASSIGN_SHIFT_RIGHT_OP
%token ASSIGN_BITWISE_AND_OP
%token ASSIGN_BITWISE_XOR_OP
%token ASSIGN_BITWISE_OR_OP

// Other Operators
%token UNARY_INCREMENT_OP
%token UNARY_DECREMENT_OP
%token BITWISE_NOT_OP
%token MUL_OP
%token DIV_OP
%token ADD_OP
%token SUB_OP
%token NOT_OP
%token MOD_OP
%token AND_OP
%token OR_OP
%token LOGICAL_OR_OP
%token LOGICAL_AND_OP
%token EXCLUSIVE_OR_OP


// Comparison Operator
%token EQUAL_OP
%token NOT_EQUAL_OP
%token LT_OP
%token GT_OP
%token LE_OP
%token GE_OP

// Shift Operators
%token SHIFT_LEFT_OP
%token SHIFT_RIGHT_OP

// Punctations
%token LINE_END
%token COLON
%token COMMA
%token QUESTION_MARK

// Braces
%token OB
%token CB
%token OB_CURLY
%token CB_CURLY

//Keywords
%token BREAK
%token CONTINUE
%token WHILE
%token RETURN
%token IF
%token ELSE
%token GOTO


%nonassoc CB
%nonassoc ELSE

%%


translation_unit            : external_declaration
                            | translation_unit external_declaration
                            ;


external_declaration        : function_definition
                            | declaration
                            ;


function_definition         : declaration_specification     declarator declaration_list compound_statement
                            |                               declarator declaration_list compound_statement
                            | declaration_specification     declarator                  compound_statement
                            |                               declarator                  compound_statement
                            ;


declaration                 : declaration_specification init_declarator_list LINE_END
                            | declaration_specification LINE_END
                            ;
                            

declaration_list            : declaration
                            | declaration_list declaration
                            ;


compound_statement          : OB_CURLY declaration_list statement_list  CB_CURLY
                            | OB_CURLY                  statement_list  CB_CURLY
                            | OB_CURLY declaration_list                 CB_CURLY
                            | OB_CURLY                                  CB_CURLY
                            ;


statement_list              : statement
                            | statement_list statement
                            ;
           

statement                   : labeled_statement
                            | expression_statement
                            | compound_statement
                            | selection_statement
                            | iteration_statement
                            | jump_statement
                            ;
                            

labeled_statement           : ID COLON statement
                            ;


expression_statement        : expression LINE_END
                            | LINE_END
                            ;


selection_statement         : IF OB expression CB statement
                            | IF OB expression CB statement ELSE statement
                            ;


iteration_statement         : WHILE OB expression CB statement
                            ;


jump_statement              : GOTO ID LINE_END
                            | CONTINUE LINE_END
                            | BREAK LINE_END
                            | RETURN expression LINE_END
                            | RETURN LINE_END
                            ;


declaration_specification   : type_specification
                            | type_specification declaration_specification
                            ;


type_specification          : VOID
                            | CHAR
                            | SHORT
                            | INT
                            | LONG
                            | FLOAT
                            | DOUBLE
                            | SIGNED
                            | UNSIGNED
                            ;


init_declarator_list        : init_declarator
                            | init_declarator_list COMMA init_declarator
                            ;


init_declarator             : declarator
                            | declarator ASSIGN_OP initializer
                            ;


declarator                  : ID
                            | OB declarator CB
                            | declarator OB parameter_list CB
                            | declarator OB CB
                            ;
                            
                            
parameter_list              : parameter_declaration
                            | parameter_list COMMA parameter_declaration
                            ;
                            
                            
parameter_declaration       : declaration_specification declarator
                            | declaration_specification
                            ;


initializer                 : assignment_expression
                            | OB_CURLY initializer_list         CB_CURLY
                            | OB_CURLY initializer_list COMMA   CB_CURLY
                            ;
                            
                            
initializer_list            : initializer
                            | initializer_list COMMA initializer
                            ;


assignment_expression       : conditional_expression
                            | unary_expression assignment_operator assignment_expression
                            ;


conditional_expression      : logical_or_expression
                            | logical_or_expression QUESTION_MARK expression COLON conditional_expression
                            ;


unary_expression            : postfix_expression
                            | UNARY_INCREMENT_OP unary_expression
                            | UNARY_DECREMENT_OP unary_expression
                            | unary_operator
                            ;


assignment_operator         : ASSIGN_OP
                            | ASSIGN_MUL_OP
                            | ASSIGN_DIV_OP
                            | ASSIGN_MOD_OP
                            | ASSIGN_ADD_OP
                            | ASSIGN_SUB_OP
                            | ASSIGN_SHIFT_LEFT_OP
                            | ASSIGN_SHIFT_RIGHT_OP
                            | ASSIGN_BITWISE_AND_OP
                            | ASSIGN_BITWISE_XOR_OP
                            | ASSIGN_BITWISE_OR_OP
                            ;


logical_or_expression       : logical_and_expression
                            | logical_or_expression LOGICAL_OR_OP logical_and_expression
                            ;


logical_and_expression      : inclusive_or_expression
                            | logical_and_expression LOGICAL_AND_OP inclusive_or_expression
                            ;


inclusive_or_expression     : exclusive_or_expression
                            | inclusive_or_expression  OR_OP exclusive_or_expression
                            ;


exclusive_or_expression     : and_expression
                            | exclusive_or_expression EXCLUSIVE_OR_OP and_expression
                            ;


and_expression              : equality_expression
                            | and_expression AND_OP equality_expression
                            ;


equality_expression         : relational_expression
                            | equality_expression EQUAL_OP relational_expression
                            | equality_expression NOT_EQUAL_OP relational_expression
                            ;


relational_expression       : shift_expression
                            | relational_expression LT_OP shift_expression
                            | relational_expression GT_OP shift_expression
                            | relational_expression LE_OP shift_expression
                            | relational_expression GE_OP shift_expression
                            ;


shift_expression            : additive_expression
                            | shift_expression SHIFT_LEFT_OP additive_expression
                            | shift_expression SHIFT_RIGHT_OP additive_expression
                            ;


additive_expression         : multiplicative_expression
                            | additive_expression ADD_OP multiplicative_expression
                            | additive_expression SUB_OP multiplicative_expression
                            ;


multiplicative_expression   : unary_expression
                            | multiplicative_expression MUL_OP unary_expression
                            | multiplicative_expression DIV_OP unary_expression
                            | multiplicative_expression MOD_OP unary_expression
                            ;


expression                  : assignment_expression
                            | expression COMMA assignment_expression
                            ;


postfix_expression          : primary_expression
                            | postfix_expression OB argument_expression_list CB
                            | postfix_expression OB CB
                            | postfix_expression UNARY_INCREMENT_OP
                            | postfix_expression UNARY_DECREMENT_OP
                            ;


primary_expression          : ID
                            | const
                            | STRING
                            | OB expression CB
                            ;


argument_expression_list    : assignment_expression
                            | argument_expression_list COMMA assignment_expression
                            ;


const                       : CHAR_CONST
                            | INT_CONST
                            | FLOAT_CONST
                            ;


unary_operator              : AND_OP
                            | MUL_OP
                            | ADD_OP
                            | SUB_OP
                            | BITWISE_NOT_OP
                            | NOT_OP
                            ;


%%


void start_scanning(const char *input, id<CCOutput> output)
{
#if BISON_DEBUG
    yydebug = 1;
#endif
    yylineno = 0;
    _output = output;
    YY_BUFFER_STATE buffer=yy_scan_string(input);
    yyparse();
    [[CCSymbolTable sharedInstance] printSymbolTable:output];
    yy_delete_buffer(buffer);
}


int yyerror(char *s)
{
    [_output printError:[NSString stringWithFormat:@"[line %i] error: %s\n", yylineno, s]];
    return 0;
}