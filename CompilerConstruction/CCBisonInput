%{

#include <stdio.h>

#import "CCParser.h"
#import "CCScanner.h"
#import "CCSymbolTable.h"
#import "CCSyntaxTree.h"
#import "CCNodes.h"
#import "CCDebug.h"

#if BISON_DEBUG
    #define YYDEBUG 1
#endif

id<CCOutput> _output;

%}

%union {
    __unsafe_unretained id syntax_node;
}

// Type Specifiers
%token VOID
%token CHAR
%token SHORT
%token INT
%token LONG
%token FLOAT
%token DOUBLE
%token SIGNED
%token UNSIGNED

// Symbols
%token <syntax_node>ID
%token <syntax_node>STRING
%token CHAR_CONST
%token INT_CONST
%token FLOAT_CONST

// Assignement Operators
%token ASSIGN_OP
%token ASSIGN_MUL_OP
%token ASSIGN_DIV_OP
%token ASSIGN_MOD_OP
%token ASSIGN_ADD_OP
%token ASSIGN_SUB_OP
%token ASSIGN_SHIFT_LEFT_OP
%token ASSIGN_SHIFT_RIGHT_OP
%token ASSIGN_BITWISE_AND_OP
%token ASSIGN_BITWISE_XOR_OP
%token ASSIGN_BITWISE_OR_OP

// Other Operators
%token UNARY_INCREMENT_OP
%token UNARY_DECREMENT_OP
%token BITWISE_NOT_OP
%token MUL_OP
%token DIV_OP
%token ADD_OP
%token SUB_OP
%token NOT_OP
%token MOD_OP
%token AND_OP
%token OR_OP
%token LOGICAL_OR_OP
%token LOGICAL_AND_OP
%token EXCLUSIVE_OR_OP


// Comparison Operator
%token EQUAL_OP
%token NOT_EQUAL_OP
%token LT_OP
%token GT_OP
%token LE_OP
%token GE_OP

// Shift Operators
%token SHIFT_LEFT_OP
%token SHIFT_RIGHT_OP

// Punctations
%token LINE_END
%token COLON
%token COMMA
%token QUESTION_MARK

// Braces
%token OB
%token CB
%token OB_CURLY
%token CB_CURLY

//Keywords
%token BREAK
%token CONTINUE
%token WHILE
%token RETURN
%token IF
%token ELSE
%token GOTO


%type <syntax_node> translation_unit;
%type <syntax_node> external_declaration;
%type <syntax_node> function_definition;
%type <syntax_node> declaration;
%type <syntax_node> declaration_specification;
%type <syntax_node> declarator;
%type <syntax_node> declaration_list;
%type <syntax_node> compound_statement;
%type <syntax_node> init_declarator_list;
%type <syntax_node> statement_list;
%type <syntax_node> statement;
%type <syntax_node> labeled_statement;
%type <syntax_node> expression_statement;
%type <syntax_node> selection_statement;
%type <syntax_node> iteration_statement;
%type <syntax_node> jump_statement;
%type <syntax_node> expression;
%type <syntax_node> type_specification;
%type <syntax_node> init_declarator;
%type <syntax_node> initializer;
%type <syntax_node> parameter_list;
%type <syntax_node> parameter_declaration;
%type <syntax_node> assignment_expression;
%type <syntax_node> initializer_list;
%type <syntax_node> conditional_expression;
%type <syntax_node> unary_expression;
%type <syntax_node> assignment_operator;
%type <syntax_node> logical_or_expression;
%type <syntax_node> postfix_expression;
%type <syntax_node> prefix_operator;
%type <syntax_node> unary_operator;
%type <syntax_node> logical_and_expression;
%type <syntax_node> inclusive_or_expression;
%type <syntax_node> exclusive_or_expression;
%type <syntax_node> and_expression;
%type <syntax_node> equality_expression;
%type <syntax_node> equality_operator;
%type <syntax_node> relational_expression;
%type <syntax_node> compare_operator;
%type <syntax_node> shift_expression;
%type <syntax_node> shift_operator;
%type <syntax_node> additive_expression;
%type <syntax_node> additive_operator;
%type <syntax_node> multiplicative_expression;
%type <syntax_node> const;
%type <syntax_node> argument_expression_list;
%type <syntax_node> primary_expression;
%type <syntax_node> postfix_operator;
%type <syntax_node> multiplicative_operator;

%nonassoc CB
%nonassoc ELSE

%%

document                    :
                            | translation_unit                          { [[CCSyntaxTree sharedInstance] addTranslationUnit:$1]; }
                            ;


translation_unit            : external_declaration                      { 
                                                                            $$ = [CCTranslationUnitNode translationUnitWith:$1
                                                                                                            translationUnit:nil];
                                                                        }
                            | translation_unit external_declaration     { 
                                                                            $$ = [CCTranslationUnitNode translationUnitWith:$2
                                                                                                            translationUnit:$1];
                                                                        }
                            ;


external_declaration        : function_definition                       { $$ = [CCExternalDeclarationNode functionDefinition:$1]; }
                            | declaration                               { $$ = [CCExternalDeclarationNode declaration:$1]; }
                            ;


function_definition         : declaration_specification     declarator declaration_list compound_statement { $$ = [CCFunctionDefinitionNode functionDefinitionWithDeclarationSpecification:$1 declarator:$2 declarationList:$3 compoundStatement:$4]; }
                            |                               declarator declaration_list compound_statement { $$ = [CCFunctionDefinitionNode functionDefinitionWithDeclarationSpecification:nil declarator:$1 declarationList:$2 compoundStatement:$3]; }
                            | declaration_specification     declarator                  compound_statement { $$ = [CCFunctionDefinitionNode functionDefinitionWithDeclarationSpecification:$1 declarator:$2 declarationList:nil compoundStatement:$3]; }
                            |                               declarator                  compound_statement { $$ = [CCFunctionDefinitionNode functionDefinitionWithDeclarationSpecification:nil declarator:$1 declarationList:nil compoundStatement:$2]; }
                            ;


declaration                 : declaration_specification init_declarator_list LINE_END   { 
                                                                                            $$ = [CCDeclarationNode declarationNodeWithDeclarationSpecification:$1
                                                                                                                                             initDeclaratorList:$2];
                                                                                        }
                            | declaration_specification LINE_END                        { 
                                                                                            $$ = [CCDeclarationNode declarationNodeWithDeclarationSpecification:$1
                                                                                                                                             initDeclaratorList:nil];
                                                                                        }
                            ;
                            

declaration_list            : declaration                                               {
                                                                                            $$ =  [CCDeclarationListNode declarationListNodeWithDeclarationList:nil
                                                                                                                                                    declaration:$1];
                                                                                        }
                            | declaration_list declaration                              {
                                                                                            $$ =  [CCDeclarationListNode declarationListNodeWithDeclarationList:$1
                                                                                                                                                    declaration:$2];
                                                                                        }
                            ;


compound_statement          : OB_CURLY declaration_list statement_list  CB_CURLY    {
                                                                                        $$ = [CCCompoundStatementNode compoundStatemetnNodeWithDeclarationList:$2
                                                                                                                                                 statementList:$3];
                                                                                    }
                            | OB_CURLY                  statement_list  CB_CURLY    {
                                                                                        $$ = [CCCompoundStatementNode compoundStatemetnNodeWithDeclarationList:nil
                                                                                                                                                 statementList:$2];
                                                                                    }
                            | OB_CURLY declaration_list                 CB_CURLY    {
                                                                                        $$ = [CCCompoundStatementNode compoundStatemetnNodeWithDeclarationList:$2
                                                                                                                                                 statementList:nil];
                                                                                    }
                            | OB_CURLY                                  CB_CURLY    {
                                                                                        $$ = [CCCompoundStatementNode compoundStatemetnNodeWithDeclarationList:nil
                                                                                                                                                 statementList:nil];
                                                                                    }
                            ;


statement_list              : statement                 { 
                                                            $$ = [CCStatementListNode statementListNodeWithStatementList:nil 
                                                                                                               statement:$1];
                                                        }
                            | statement_list statement  { 
                                                            $$ = [CCStatementListNode statementListNodeWithStatementList:$1
                                                                                                               statement:$2];
                                                        }
                            ;
           

statement                   : labeled_statement         { $$ = [CCStatementNode statementNodeWithLabeledStatement:$1]; }
                            | expression_statement      { $$ = [CCStatementNode statementNodeWithExpressionStatement:$1]; }
                            | compound_statement        { $$ = [CCStatementNode statementNodeWithCompoundStatement:$1]; }
                            | selection_statement       { $$ = [CCStatementNode statementNodeWithSelectionStatement:$1]; }
                            | iteration_statement       { $$ = [CCStatementNode statementNodeWithIterationStatement:$1]; }
                            | jump_statement            { $$ = [CCStatementNode statementNodeWithJumpStatement:$1]; }
                            ;
                            

labeled_statement           : ID COLON statement        {
                                                            $$ = [CCLabeledStatementNode labeledExpressionNodeWithStatement:$1
                                                                                                                 identifier:$3];
                                                        }
                            ;


expression_statement        : expression LINE_END       { $$ = [CCExpressionStatementNode expressionStatementNodeWithExpression:$1]; }
                            | LINE_END                  { $$ = [CCExpressionStatementNode expressionStatementNodeWithExpression:nil]; }
                            ;


selection_statement         : IF OB expression CB statement                 {
                                                                                $$ = [CCSelectionStatementNode selectionStatementNodeWithExpression:$3
                                                                                                                                      thenStatement:$5
                                                                                                                                      elseStatement:nil];
                                                                            }
                            | IF OB expression CB statement ELSE statement  {
                                                                                $$ = [CCSelectionStatementNode selectionStatementNodeWithExpression:$3
                                                                                                                                      thenStatement:$5
                                                                                                                                      elseStatement:$7];
                                                                            }
                            ;


iteration_statement         : WHILE OB expression CB statement  {   
                                                                    $$ = [CCIterationStatementNode iterationStatementWithExpression:$3
                                                                                                                          statement:$5];
                                                                }
                            ;


jump_statement              : GOTO ID LINE_END              { $$ = [CCJumpStatementNode gotoStatementWithIdentifier:$2]; }
                            | CONTINUE LINE_END             { $$ = [CCJumpStatementNode continueStatement]; }
                            | BREAK LINE_END                { $$ = [CCJumpStatementNode breakStatement]; }
                            | RETURN expression LINE_END    { $$ = [CCJumpStatementNode returnStatementWithExpression:$2]; }
                            | RETURN LINE_END               { $$ = [CCJumpStatementNode returnStatementWithExpression:nil]; }
                            ;


declaration_specification   : type_specification                            { 
                                                                                $$ = [CCDeclarationSpecificationNode declarationSpecificationNodeWithdeclarationSpecification:nil
                                                                                                                                                            typeSpecification:$1];
                                                                            }
                            | type_specification declaration_specification  { 
                                                                                $$ = [CCDeclarationSpecificationNode declarationSpecificationNodeWithdeclarationSpecification:$2
                                                                                                                                                            typeSpecification:$1];
                                                                            }
                            ;


type_specification          : VOID          { $$ = [CCTypeSpecificationNode CC_VOID]; }
                            | CHAR          { $$ = [CCTypeSpecificationNode CC_CHAR]; }
                            | SHORT         { $$ = [CCTypeSpecificationNode CC_SHORT]; }
                            | INT           { $$ = [CCTypeSpecificationNode CC_INT]; }
                            | LONG          { $$ = [CCTypeSpecificationNode CC_LONG]; }
                            | FLOAT         { $$ = [CCTypeSpecificationNode CC_FLOAT]; }
                            | DOUBLE        { $$ = [CCTypeSpecificationNode CC_DOUBLE]; }
                            | SIGNED        { $$ = [CCTypeSpecificationNode CC_SIGNED]; }
                            | UNSIGNED      { $$ = [CCTypeSpecificationNode CC_UNSIGNED]; }
                            ;


init_declarator_list        : init_declarator                               {
                                                                                $$ = [CCInitDeclaratorListNode initDeclaratorListNodeWithInitDeclaratorList:nil
                                                                                                                                             initDeclarator:$1];
                                                                            }
                            | init_declarator_list COMMA init_declarator    {
                                                                                $$ = [CCInitDeclaratorListNode initDeclaratorListNodeWithInitDeclaratorList:$1
                                                                                                                                             initDeclarator:$3];
                                                                            }
                            ;


init_declarator             : declarator                        {
                                                                    $$ = [CCInitDeclaratorNode initDeclaratorNodeWithDeclarator:$1
                                                                                                                    initializer:nil];
                                                                }
                            | declarator ASSIGN_OP initializer  {
                                                                    $$ = [CCInitDeclaratorNode initDeclaratorNodeWithDeclarator:$1
                                                                                                                    initializer:$3];
                                                                }
                            ;


declarator                  : ID                                {
                                                                    $$ = [CCDeclaratorNode declaratorNodeWithDeclarator:nil
                                                                                                             identifier:$1
                                                                                                          parameterList:nil];
                                                                }
                            | OB declarator CB                  {
                                                                    $$ = [CCDeclaratorNode declaratorNodeWithDeclarator:$2
                                                                                                             identifier:nil
                                                                                                          parameterList:nil];
                                                                }
                            | declarator OB parameter_list CB   {
                                                                    $$ = [CCDeclaratorNode declaratorNodeWithDeclarator:$1
                                                                                                             identifier:nil
                                                                                                          parameterList:$3];
                                                                }
                            | declarator OB CB                  {
                                                                    $$ = [CCDeclaratorNode declaratorNodeWithDeclarator:$1
                                                                                                             identifier:nil
                                                                                                          parameterList:nil];
                                                                }
                            ;
                            
                            
parameter_list              : parameter_declaration                         {
                                                                                $$ = [CCParameterListNode parameterListNodeWithParameterDeclaration:$1
                                                                                                                                      parameterList:nil];
                                                                            }
                            | parameter_list COMMA parameter_declaration    {
                                                                                $$ = [CCParameterListNode parameterListNodeWithParameterDeclaration:$3
                                                                                                                                      parameterList:$1];
                                                                            }
                            ;
                            
                            
parameter_declaration       : declaration_specification declarator          {
                                                                                $$ = [CCParameterDeclarationNode parameterDeclarationNodeWithDeclarationSpecification:$1
                                                                                                                                                           declarator:$2];
                                                                            }
                            | declaration_specification                     {
                                                                                $$ = [CCParameterDeclarationNode parameterDeclarationNodeWithDeclarationSpecification:$1
                                                                                                                                                           declarator:nil];
                                                                            }
                            ;


initializer                 : assignment_expression                         {
                                                                                $$ = [CCInitializerNode initializerNodeWithAssignmentExpression:$1
                                                                                                                                initializerList:nil];
                                                                            }
                            | OB_CURLY initializer_list         CB_CURLY    {
                                                                                $$ = [CCInitializerNode initializerNodeWithAssignmentExpression:nil
                                                                                                                                initializerList:$2];
                                                                            }
                            | OB_CURLY initializer_list COMMA   CB_CURLY    {
                                                                                $$ = [CCInitializerNode initializerNodeWithAssignmentExpression:nil
                                                                                                                                initializerList:$2];
                                                                            }
                            ;
                            
                            
initializer_list            : initializer                                   {  
                                                                                $$ = [CCInitializerListNode initializerListNodeWithInitializer:$1
                                                                                                                               initializerList:nil];
                                                                            }
                            | initializer_list COMMA initializer            {  
                                                                                $$ = [CCInitializerListNode initializerListNodeWithInitializer:$3
                                                                                                                               initializerList:$1];
                                                                            }
                            ;


assignment_expression       : conditional_expression                                        { printf("bla");$$ = [CCAssignmentExpressionNode assignmentExpressionNodeWithConditionalExpression:$1]; }
                            | unary_expression assignment_operator assignment_expression    {
                                                                                                $$ = [CCAssignmentExpressionNode assignmentExpressionNodeWithUnaryExpression:$1
                                                                                                                                                          assignmentOperator:$2
                                                                                                                                                        assignmentExpression:$3];
                                                                                            }
                            ;


conditional_expression      : logical_or_expression                                                         {
                                                                                                                $$ = [CCConditionalExpressionNode conditionalExpressionNodeWithLogicalOrExpression:$1
                                                                                                                                                                                        expression:nil
                                                                                                                                                                             conditionalExpression:nil];
                                                                                                            }
                            | logical_or_expression QUESTION_MARK expression COLON conditional_expression   {
                                                                                                                $$ = [CCConditionalExpressionNode conditionalExpressionNodeWithLogicalOrExpression:$1
                                                                                                                                                                                        expression:$3
                                                                                                                                                                             conditionalExpression:$5];
                                                                                                            }
                            ;


unary_expression            : postfix_expression                    { $$ = [CCUnaryExpressionNode unaryExpressionNodeWithPostfixExpression:$1]; }
                            | prefix_operator unary_expression      {
                                                                        $$ = [CCUnaryExpressionNode unaryExpressionNodeWithPrefixOperator:$1
                                                                                                                          unaryExpression:$2];
                                                                    }
                            | unary_operator                        { $$ = [CCUnaryExpressionNode unaryExpressionNodeWithUnaryOperator:$1]; }
                            ;
                            

prefix_operator             : UNARY_INCREMENT_OP                    { $$ = [CCPrefixOperatorNode prefixIncrement]; }
                            | UNARY_DECREMENT_OP                    { $$ = [CCPrefixOperatorNode prefixDecrement]; }
                            ;


assignment_operator         : ASSIGN_OP                             { $$ = [CCAssignmentOperatorNode CC_ASSIGN_OP]; }
                            | ASSIGN_MUL_OP                         { $$ = [CCAssignmentOperatorNode CC_ASSIGN_MUL_OP]; }
                            | ASSIGN_DIV_OP                         { $$ = [CCAssignmentOperatorNode CC_ASSIGN_DIV_OP]; }
                            | ASSIGN_MOD_OP                         { $$ = [CCAssignmentOperatorNode CC_ASSIGN_MOD_OP]; }
                            | ASSIGN_ADD_OP                         { $$ = [CCAssignmentOperatorNode CC_ASSIGN_ADD_OP]; }
                            | ASSIGN_SUB_OP                         { $$ = [CCAssignmentOperatorNode CC_ASSIGN_SUB_OP]; }
                            | ASSIGN_SHIFT_LEFT_OP                  { $$ = [CCAssignmentOperatorNode CC_ASSIGN_SHIFT_LEFT_OP]; }
                            | ASSIGN_SHIFT_RIGHT_OP                 { $$ = [CCAssignmentOperatorNode CC_ASSIGN_SHIFT_RIGHT_OP]; }
                            | ASSIGN_BITWISE_AND_OP                 { $$ = [CCAssignmentOperatorNode CC_ASSIGN_BITWISE_AND_OP]; }
                            | ASSIGN_BITWISE_XOR_OP                 { $$ = [CCAssignmentOperatorNode CC_ASSIGN_BITWISE_XOR_OP]; }
                            | ASSIGN_BITWISE_OR_OP                  { $$ = [CCAssignmentOperatorNode CC_ASSIGN_BITWISE_OR_OP]; }
                            ;


logical_or_expression       : logical_and_expression                                        {   
                                                                                                $$ = [CCLogicalOrExpressionNode logicalOrExpressionNodeWithLogicalAndExpression:$1
                                                                                                                                                            logicalOrExpression:nil];
                                                                                            }
                            | logical_or_expression LOGICAL_OR_OP logical_and_expression    {   
                                                                                                $$ = [CCLogicalOrExpressionNode logicalOrExpressionNodeWithLogicalAndExpression:$3
                                                                                                                                                            logicalOrExpression:$1];
                                                                                            }
                            ;


logical_and_expression      : inclusive_or_expression                                       {
                                                                                                $$ = [CCLogicalAndExpressionNode logicalAndExpressionNodeWithInclusiveOrExpression:$1
                                                                                                                                                              logicalAndExpression:nil];
                                                                                            }
                            | logical_and_expression LOGICAL_AND_OP inclusive_or_expression {
                                                                                                $$ = [CCLogicalAndExpressionNode logicalAndExpressionNodeWithInclusiveOrExpression:$3
                                                                                                                                                              logicalAndExpression:$1];
                                                                                            }
                            ;


inclusive_or_expression     : exclusive_or_expression                                       {
                                                                                                $$ = [CCInclusiveOrExpressionNode inclusiveOrExpressionNodeWithExclusiveOrExpression:$1
                                                                                                                                                               inclusiveOrExpression:nil];
                                                                                            }
                            | inclusive_or_expression  OR_OP exclusive_or_expression        {
                                                                                                $$ = [CCInclusiveOrExpressionNode inclusiveOrExpressionNodeWithExclusiveOrExpression:$3
                                                                                                                                                               inclusiveOrExpression:$1];
                                                                                            }
                            ;


exclusive_or_expression     : and_expression                                                {
                                                                                                $$ = [CCExclusiveOrExpressionNode exclusiveOrExpressionNodeWithAndExpression:$1
                                                                                                                                                       exclusiveOrExpression:nil];
                                                                                            }
                            | exclusive_or_expression EXCLUSIVE_OR_OP and_expression        {
                                                                                                $$ = [CCExclusiveOrExpressionNode exclusiveOrExpressionNodeWithAndExpression:$3
                                                                                                                                                       exclusiveOrExpression:$1];
                                                                                            }
                            ;


and_expression              : equality_expression                                           {
                                                                                                $$ = [CCAndExpressionNode andExpressionNodeWithEqualityExpression:$1
                                                                                                                                                    andExpression:nil];
                                                                                            }
                            | and_expression AND_OP equality_expression                     {
                                                                                                $$ = [CCAndExpressionNode andExpressionNodeWithEqualityExpression:$3
                                                                                                                                                    andExpression:$1];
                                                                                            }
                            ;


equality_expression         : relational_expression                                         {
                                                                                                $$ = [CCEqualityExpressionNode equalityExpressionNodeWithRelationalExpression:$1
                                                                                                                                                            equatlityOperator:nil
                                                                                                                                                           equalityExpression:nil];
                                                                                            }
                            | equality_expression equality_operator relational_expression   {
                                                                                                $$ = [CCEqualityExpressionNode equalityExpressionNodeWithRelationalExpression:$3
                                                                                                                                                            equatlityOperator:$2
                                                                                                                                                           equalityExpression:$1];
                                                                                            }
                            ;
                            
                            
equality_operator           : EQUAL_OP          { $$ = [CCEqualityOperatorNode CC_EQUAL_OP]; }
                            | NOT_EQUAL_OP      { $$ = [CCEqualityOperatorNode CC_NOT_EQUAL_OP]; }
                            ;


relational_expression       : shift_expression                                              {
                                                                                                $$ = [CCRelationalExpressionNode relationalExpressionNodeWithShiftExpression:$1
                                                                                                                                                             compareOperator:nil
                                                                                                                                                        relationalExpression:nil];
                                                                                            }
                            | relational_expression compare_operator shift_expression       {
                                                                                                $$ = [CCRelationalExpressionNode relationalExpressionNodeWithShiftExpression:$3
                                                                                                                                                             compareOperator:$2
                                                                                                                                                        relationalExpression:$1];
                                                                                            }
                            ;
                            
                            
compare_operator            : LT_OP             { $$ = [CCCompareOperatorNode CC_LT]; }
                            | GT_OP             { $$ = [CCCompareOperatorNode CC_GT]; }
                            | LE_OP             { $$ = [CCCompareOperatorNode CC_LE]; }
                            | GE_OP             { $$ = [CCCompareOperatorNode CC_GE]; }
                            ;


shift_expression            : additive_expression                                           {
                                                                                                $$ = [CCShiftExpressionNode shiftExpressionNodeWithAdditiveExpression:$1
                                                                                                                                                        shiftOperator:nil
                                                                                                                                                      shiftExpression:nil];
                                                                                            }
                            | shift_expression shift_operator additive_expression           {
                                                                                                $$ = [CCShiftExpressionNode shiftExpressionNodeWithAdditiveExpression:$3
                                                                                                                                                        shiftOperator:$2
                                                                                                                                                      shiftExpression:$1];
                                                                                            }
                            ;
                            
                            
shift_operator              : SHIFT_LEFT_OP     { $$ = [CCShiftOperatorNode CC_SHIFT_LEFT_OP]; }
                            | SHIFT_RIGHT_OP    { $$ = [CCShiftOperatorNode CC_SHIFT_RIGTH_OP]; }
                            ;

additive_expression         : multiplicative_expression                                         {
                                                                                                    $$ = [CCAdditiveExpressionNode additiveExpressionNodeWithMultiplicativeExpression:$1
                                                                                                                                                                     additiveOperator:nil
                                                                                                                                                                   additiveExpression:nil];
                                                                                                }
                            | additive_expression additive_operator multiplicative_expression   {
                                                                                                    $$ = [CCAdditiveExpressionNode additiveExpressionNodeWithMultiplicativeExpression:$3
                                                                                                                                                                     additiveOperator:$2
                                                                                                                                                                   additiveExpression:$1];
                                                                                                }
                            ;


additive_operator           : ADD_OP { $$ = [CCAdditiveOperatorNode CC_ADD_OP]; }
                            | SUB_OP { $$ = [CCAdditiveOperatorNode CC_SUB_OP]; }
                            ;


multiplicative_expression   : unary_expression                                                      { $$ = [CCMultiplicativeExpressionNode multiplicativeExpressionNodeWithUnaryExpression:$1
                                                                                                                                                                    multiplicativeOperator:nil
                                                                                                                                                                  multiplicativeExpression:nil];
                                                                                                    }
                            | multiplicative_expression multiplicative_operator unary_expression    { $$ = [CCMultiplicativeExpressionNode multiplicativeExpressionNodeWithUnaryExpression:$3
                                                                                                                                                                    multiplicativeOperator:$2
                                                                                                                                                                  multiplicativeExpression:$1];
                                                                                                    }
                            ;
                            
                            
multiplicative_operator     : MUL_OP    { $$ = [CCMultiplicativeOperatorNode CC_MUL_OP]; }
                            | DIV_OP    { $$ = [CCMultiplicativeOperatorNode CC_DIV_OP]; }
                            | MOD_OP    { $$ = [CCMultiplicativeOperatorNode CC_MOD_OP]; }
                            ;


expression                  : assignment_expression                     { 
                                                                            $$ = [CCExpressionNode expressionNodeWithAssignmentExpression:$1
                                                                                                                               expression:nil];
                                                                        }
                            | expression COMMA assignment_expression    { 
                                                                            $$ = [CCExpressionNode expressionNodeWithAssignmentExpression:$3
                                                                                                                               expression:$1];
                                                                        }
                            ;


postfix_expression          : primary_expression                                 { 
                                                                                    $$ = [CCPostfixExpressionNode postfixExpressionNodeWithPrimaryExpression:$1];
                                                                                 }
                            | postfix_expression OB argument_expression_list CB  { 
                                                                                    $$ = [CCPostfixExpressionNode postfixExpressionNodeWithPostfixExpression:$1
                                                                                                                                      argumentExpressionList:$3];
                                                                                 }
                            | postfix_expression OB CB                           { 
                                                                                    $$ = [CCPostfixExpressionNode postfixExpressionNodeWithPostfixExpression:$1];
                                                                                 }
                            | postfix_expression postfix_operator                { 
                                                                                    $$ = [CCPostfixExpressionNode postfixExpressionNodeWithPostfixExpression:$1
                                                                                                                                             postfixOperator:$2 ];
                                                                                 }
                            ;
                            
                            
postfix_operator            : UNARY_INCREMENT_OP { $$ = [CCPostfixOperatorNode CC_UNARY_INCREMENT_OP]; }
                            | UNARY_DECREMENT_OP { $$ = [CCPostfixOperatorNode CC_UNARY_DECREMENT_OP]; }
                            ;


primary_expression          : ID                { $$ = [CCPrimaryExpressionNode primaryExpressionNodeWithIdentifier:$1]; }
                            | const             { $$ = [CCPrimaryExpressionNode primaryExpressionNodeWithConstant:$1]; }
                            | STRING            { $$ = [CCPrimaryExpressionNode primaryExpressionNodeWithString:$1]; }
                            | OB expression CB  { $$ = [CCPrimaryExpressionNode primaryExpressionNodeWithExpression:$2]; }
                            ;


argument_expression_list    : assignment_expression                                 { 
                                                                                       $$ = [CCArgumentExpressionListNode argumentExpressionListNodeWithAssignmentExpression:$1
                                                                                                                        argumentExpressionList:nil]; 
                                                                                    }
                            | argument_expression_list COMMA assignment_expression  {
                                                                                       $$ = [CCArgumentExpressionListNode argumentExpressionListNodeWithAssignmentExpression:$3
                                                                                                                                                  argumentExpressionList:$1];
                                                                                    }
                            ;


const                       : CHAR_CONST           { $$ = [CCConstNode CC_CHAR_CONST]; }
                            | INT_CONST            { $$ = [CCConstNode CC_INT_CONST]; }
                            | FLOAT_CONST          { $$ = [CCConstNode CC_FLOAT_CONST]; }
                            ;


unary_operator              : AND_OP                { $$ = [CCUnaryOperatorNode CC_UNARY_AND_OP]; }
                            | MUL_OP                { $$ = [CCUnaryOperatorNode CC_UNARY_MUL_OP]; }
                            | ADD_OP                { $$ = [CCUnaryOperatorNode CC_UNARY_ADD_OP]; }
                            | SUB_OP                { $$ = [CCUnaryOperatorNode CC_UNARY_SUB_OP]; }
                            | BITWISE_NOT_OP        { $$ = [CCUnaryOperatorNode CC_UNARY_BITWISE_NOT_OP]; }
                            | NOT_OP                { $$ = [CCUnaryOperatorNode CC_UNARY_NOT_OP]; }
                            ;


%%


void start_compiling(const char *input, id<CCOutput> output)
{
#if BISON_DEBUG
    yydebug = 1;
#endif
    yylineno = 1;
    _output = output;
    YY_BUFFER_STATE buffer=yy_scan_string(input);
    yyparse();
    yy_delete_buffer(buffer);
}


int yyerror(char *s)
{
    [_output printError:[NSString stringWithFormat:@"[line %i] error: %s\n", yylineno, s]];
    return 0;
}